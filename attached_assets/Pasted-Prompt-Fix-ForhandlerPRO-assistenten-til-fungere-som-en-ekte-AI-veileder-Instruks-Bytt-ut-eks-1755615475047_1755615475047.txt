Prompt: «Fix ForhandlerPRO-assistenten til å fungere som en ekte AI-veileder»

Instruks: Bytt ut eksisterende /api/assistant (eller tilsvarende route) med denne koden:

import type { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";
import OpenAI from "openai";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const openai = process.env.OPENAI_API_KEY
  ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  : null;

const SYSTEM_PROMPT = `
Du er ForhandlerPRO-assistenten – en menneskelig, kortfattet veileder i appen (norsk).
- Svar alltid naturlig, som en ekte kollega.
- Når bruker spør *hvor/hvordan*: gi eksakt sti (f.eks. "Biler → Rediger → Prisassistent").
- Bruk korte punkter eller korte avsnitt (ikke lange essays).
- Når mulig, foreslå å åpne siden og returner tool JSON.
- Ikke finn på funksjoner. Hvis uklart: si "Jeg er ikke helt sikker".
- Respekter roller: EIER/REGNSKAP ser kost/brutto. Andre ikke.
- Bruk app-termer: Biler, Kunder, Kontrakter, Aktiviteter, Rapporter, Innstillinger → Team, Prisassistent, Innbytte, Brutto, Dager på lager, Lagret visning, Varsler.
`;

function tool(page: string, params?: any) {
  return { tool: { name: "open", page, params } };
}

function detectIntent(q: string) {
  const t = q.toLowerCase();

  const regMatch = t.match(/\b([a-z]{2}\d{5})\b/iu)?.[1];

  if (/(biler|lager)/.test(t)) return { intent: "OPEN_CARS" };
  if (/(kunder)/.test(t)) return { intent: "OPEN_CUSTOMERS" };
  if (/(kontrakt)/.test(t)) return { intent: "OPEN_CONTRACTS" };
  if (/(innstillinger|team|inviter)/.test(t)) return { intent: "OPEN_SETTINGS_TEAM" };
  if (/(varsler|aktiviteter)/.test(t)) return { intent: "OPEN_ACTIVITIES" };
  if (/(pris|prisassistent)/.test(t)) return { intent: "PRICE_HELP" };
  if (/(ny bil|legg til bil)/.test(t)) return { intent: "ADD_CAR" };
  if (/(ny kunde|opprett kunde)/.test(t)) return { intent: "ADD_CUSTOMER" };
  if (/(innbytte|trade)/.test(t)) return { intent: "TRADEIN_HELP" };
  if (/(lagret visning|saved view)/.test(t)) return { intent: "SAVED_VIEWS_HELP" };
  if (/(oppfølging|follow)/.test(t)) return { intent: "FOLLOWUP_HELP" };
  if (/(er bil|er.*solgt)/.test(t) && regMatch) return { intent: "CAR_STATUS", reg: regMatch };

  return { intent: "FREE" };
}

async function findCarByReg(companyId: string | undefined, reg?: string) {
  if (!reg) return null;
  const { data } = await supabase
    .from("cars_secure")
    .select("id, registration as regnr, status")
    .ilike("registration", `%${reg}%`)
    .limit(1);
  return data?.[0] ?? null;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { messages, hints } = req.body as {
    messages: Array<{ role: "user" | "assistant"; content: string }>;
    hints?: { role?: string; activeCompanyId?: string };
  };

  const last = messages?.at(-1)?.content ?? "";
  const role = (hints?.role || "SELGER").toUpperCase();
  const companyId = hints?.activeCompanyId;
  const intent = detectIntent(last);

  // ---- Quick navigation ----
  if (intent.intent === "OPEN_CARS")
    return res.json({ reply: "Åpner **Biler**.", ...tool("#/cars") });
  if (intent.intent === "OPEN_CUSTOMERS")
    return res.json({ reply: "Åpner **Kunder**.", ...tool("#/customers") });
  if (intent.intent === "OPEN_CONTRACTS")
    return res.json({ reply: "Åpner **Kontrakter**.", ...tool("#/contracts") });
  if (intent.intent === "OPEN_SETTINGS_TEAM")
    return res.json({ reply: "Åpner **Innstillinger → Team**.", ...tool("#/settings/team") });
  if (intent.intent === "OPEN_ACTIVITIES")
    return res.json({ reply: "Åpner **Aktiviteter**.", ...tool("#/activities") });

  // ---- Data example ----
  if (intent.intent === "CAR_STATUS") {
    const car = await findCarByReg(companyId, intent.reg);
    if (!car) return res.json({ reply: `Fant ingen bil med regnr **${intent.reg}**.` });
    const stat = /solgt/i.test(car.status) ? "Solgt" : "Tilgjengelig";
    return res.json({
      reply: `Bil **${car.regnr}** er **${stat}**.`,
      ...tool("#/cars", { modal: "edit", id: car.id }),
    });
  }

  // ---- Deterministic how-tos ----
  if (intent.intent === "PRICE_HELP")
    return res.json({
      reply: "Prisendring: Biler → Rediger → Prisassistent → Bruk anbefalt pris → Lagre.",
      ...tool("#/cars"),
    });
  if (intent.intent === "ADD_CAR")
    return res.json({
      reply: "Ny bil: Biler → Legg til bil → Skriv regnr → Fullfør detaljer → Lagre.",
      ...tool("#/cars"),
    });
  if (intent.intent === "ADD_CUSTOMER")
    return res.json({
      reply: "Ny kunde: Kunder → Legg til kunde → Navn, e-post, telefon → Lagre.",
      ...tool("#/customers"),
    });
  if (intent.intent === "TRADEIN_HELP")
    return res.json({
      reply: "Innbytte: Kontrakter → Velg kontrakt → Slå på Innbytte → Sett verdi → Lagre.",
      ...tool("#/contracts"),
    });
  if (intent.intent === "SAVED_VIEWS_HELP")
    return res.json({
      reply: "Lagret visning: Filtrer → Klikk Lagre nåværende → Gi navn → Hent via meny.",
    });
  if (intent.intent === "FOLLOWUP_HELP")
    return res.json({
      reply: "Oppfølging: Kunder → Velg kunde → Follow-ups → Ny oppfølging → Velg dato → Lagre.",
      ...tool("#/customers"),
    });

  // ---- Fallback to OpenAI ----
  const llmMessages = [
    { role: "system", content: SYSTEM_PROMPT },
    { role: "system", content: `[Hints]\nrole=${role}\nactiveCompanyId=${companyId ?? ""}\n` },
    ...messages,
  ];

  if (openai) {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: llmMessages as any,
      temperature: 0.3,
    });
    const reply = completion.choices?.[0]?.message?.content?.trim() || "Ok.";
    return res.json({ reply });
  }

  // ---- If no API key ----
  return res.json({
    reply: "Jeg kan guide deg stegvis (f.eks. «Hvor finner jeg biler?»). Sett OPENAI_API_KEY for mer naturlige svar.",
  });
}